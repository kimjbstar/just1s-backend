import { Injectable } from "@nestjs/common";
import {
  UnexpectedDeleteResultException,
  UnexpectedUpdateResultException,
  WrongIdException
} from "@src/common/http-exception";
import { UpdateResult, DeleteResult } from "typeorm";
import { {{capitalize name}}CreateDto } from "./dtos/{{name}}-create.dto";
import { {{capitalize name}}UpdateDto } from "./dtos/{{name}}-update.dto";
{{#each belongsToModels}}
import { {{camelize this.name}} } from "@src/entities/{{capitalize this.name}}.entity";
{{/each}}
{{#each subModels}}
import { {{camelize this.name}} } from "@src/entities/{{../name}}{{capitalize this.name}}.entity";
{{/each}}

@Injectable()
export class {{plucapitalize name}}Service {
  constructor() {}

  async findByPk(id): Promise<{{capitalize name}}> {
    const {{name}}: {{capitalize name}} = await {{capitalize name}}.findOne(id, {
      relations: [{{#each hasManyModels}} {{pluralize this}}, {{/each}}]
    });

    return Promise.resolve({{name}});
  }

  async create(dto: {{capitalize name}}CreateDto): Promise<{{capitalize name}}> {
{{#each belongsToModels}}
    if (dto.{{this}}Id !== undefined) {
      dto["{{this}}"] = await {{capitalize this}}.findOneOrFail(dto.{{this}}Id);
      delete dto.{{this}}Id;
    }
{{/each}}
{{#each subModels}}
    const {{pluralize this}} = dto.{{pluralize this}} ? dto.{{pluralize this}} : [];
    if (dto.{{pluralize this}}) {
      delete dto.{{pluralize this}};
    }
{{/each}}
    const {{name}}: {{capitalize name}} = new {{capitalize name}}(dto);
    await {{name}}.save();
    await {{name}}.reload();

    return this.findByPk({{name}}.id);
  }

  async update(id, dto): Promise<{{capitalize name}}> {
    const result: UpdateResult = await {{capitalize name}}.update(id, dto);
    if (result.raw.affectedRows === 0) {
      throw new WrongIdException();
    }
    if (result.raw.affectedRows > 1) {
      throw new UnexpectedUpdateResultException();
    }

    return this.findByPk(id);
  }

  async destroy(id): Promise<any> {
    const result: DeleteResult = await {{capitalize name}}.delete(id);
    if (result.raw.affectedRows === 0) {
      throw new WrongIdException();
    }
    if (result.raw.affectedRows > 1) {
      throw new UnexpectedDeleteResultException();
    }
    return Promise.resolve();
  }

}
