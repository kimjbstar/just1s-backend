import { Injectable } from "@nestjs/common";
import {
  UnexpectedDeleteResultException,
  UnexpectedUpdateResultException,
  WrongIdException
} from "@src/common/http-exception";
import { UpdateResult, DeleteResult } from "typeorm";
import { {{capitalize this.name}} } from "@src/entities/{{this.name}}.entity";
import { {{capitalize this.name}}CreateDto } from "./dtos/{{this.name}}-create.dto";
import { {{capitalize this.name}}UpdateDto } from "./dtos/{{this.name}}-update.dto";

{{#each belongsToEntityNames}}
import { {{camelize this}} } from "@src/entities/{{this}}.entity";
{{/each}}

{{#each hasManyEntities}}
import { {{camelize this.name}} } from "@src/entities/{{camelizeFirstLow this.name}}.entity";
import { {{camelize this.name}}CreateDto } from "./dtos/{{../this.name}}-create.dto";
import { {{camelize this.name}}UpdateDto } from "./dtos/{{../this.name}}-update.dto";
{{/each}}

@Injectable()
export class {{plucapitalize this.name}}Service {
  constructor() {}

  async findByPk(id): Promise<{{capitalize this.name}}> {
    const {{this.name}}: {{capitalize this.name}} = await {{capitalize this.name}}.findOne(id, {
      relations: [
        {{#each belongsToEntityNames}} "{{this}}", {{/each}},
        {{#each hasManyEntities}} "{{pluralize this.name}}", {{/each}}
        ]
    });

    return Promise.resolve({{this.name}});
  }

  async create(dto: {{capitalize this.name}}CreateDto): Promise<{{capitalize this.name}}> {
{{#each belongsToEntityNames}}
    if (dto.{{this}}Id !== undefined) {
      dto["{{this}}"] = await {{capitalize this}}.findOneOrFail(dto.{{this}}Id);
      delete dto.{{this}}Id;
    }
{{/each}}
{{#each hasManyEntities}}
    const {{pluralize this.originalName}} = dto.{{pluralize this.originalName}} ? dto.{{pluralize this.originalName}} : [];
    if (dto.{{pluralize this.originalName}}) {
      delete dto.{{pluralize this.originalName}};
    }
{{/each}}
    const {{this.name}}: {{capitalize this.name}} = await new {{capitalize this.name}}(dto).save();
    {{#each hasManyEntities}}
    await this.save{{plucapitalize this.originalName}}({{../this.name}}.id, {{pluralize this.originalName}})
    {{/each}}

    return this.findByPk({{this.name}}.id);
  }

  async update(id, dto: {{capitalize this.name}}UpdateDto): Promise<{{capitalize this.name}}> {
{{#each belongsToEntityNames}}
    if (dto.{{this}}Id !== undefined) {
      dto["{{this}}"] = await {{capitalize this}}.findOneOrFail(dto.{{this}}Id);
      delete dto.{{this}}Id;
    }
{{/each}}
{{#each hasManyEntities}}
    const {{pluralize this.originalName}} = dto.{{pluralize this.originalName}} ? dto.{{pluralize this.originalName}} : [];
    if (dto.{{pluralize this.originalName}}) {
      delete dto.{{pluralize this.originalName}};
    }
{{/each}}
    const result: UpdateResult = await {{capitalize this.name}}.update(id, dto);
    if (result.raw.affectedRows === 0) {
      throw new WrongIdException();
    }
    if (result.raw.affectedRows > 1) {
      throw new UnexpectedUpdateResultException();
    }

    const {{this.name}}: {{capitalize this.name}} = await new {{capitalize this.name}}(classToPlain(dto)).save();
    {{#each hasManyEntities}}
    await this.save{{plucapitalize this.originalName}}({{../this.name}}.id, {{pluralize this.originalName}})
    {{/each}}
    return this.findByPk(id);
  }

  async destroy(id): Promise<any> {
    const result: DeleteResult = await {{capitalize this.name}}.delete(id);
    if (result.raw.affectedRows === 0) {
      throw new WrongIdException();
    }
    if (result.raw.affectedRows > 1) {
      throw new UnexpectedDeleteResultException();
    }
    return Promise.resolve();
  }

  {{#each hasManyEntities}}
  async save{{plucapitalize this.originalName}}(id, dtos: {{camelize this.name}}CreateDto[] | {{camelize this.name}}UpdateDto[]): Promise<{{capitalize ../this.name}}> {
    const oldOne: {{capitalize ../this.name}} = await this.findByPk(id);

    if (dtos === undefined || dtos.length == 0) {
      return Promise.resolve(oldOne);
    }

    const newItems: {{camelize this.name}}[] = dtos
      .filter((dto) => dto.id === undefined)
      .map((newDto) => new {{camelize this.name}}(newDto));

    const dtoIDMap = dtos.reduce((result, dto) => {
      if (dto.id) {
        result[dto.id] = dto;
      }
      return result;
    }, {});
    console.log(dtoIDMap);
    const oldItems: {{camelize this.name}}[] = oldOne.{{pluralize this.originalName}}.reduce(
      (result, oldItem) => {
        // 명시 안됨 -> 변화 없음
        if (dtoIDMap[oldItem.id] === undefined) {
          result.push(new {{camelize this.name}}({ id: oldItem.id }));
          return result;
        }
        // 삭제 요청 체크된 항목 삭제 -> reduce 계산에 제외
        if (
          dtoIDMap[oldItem.id].toDelete === true ||
          dtoIDMap[oldItem.id].toDelete === "true"
        ) {
          return result;
        }
        // dto 기반 업데이트
        result.push(new {{camelize this.name}}(dtoIDMap[oldItem.id]));
        return result;
      },
      []
    );
    oldOne.{{pluralize this.originalName}} = [...oldItems, ...newItems];

    const {{../this.name}}: {{capitalize ../this.name}} = await oldOne.save();
    return Promise.resolve({{../this.name}});
  }
  
  {{/each}}

}
