import {
  Entity,
  Column,
  OneToMany,
  ManyToOne
} from "typeorm";
import { NbaseEntity } from "@src/common/types/nbase-entity";
import { ApiProperty } from "@nestjs/swagger";
{{#ifCond isSub '!=' true}}
import { {{#each ../enums}}{{this.name}},{{/each}} } from "@src/modules/{{pluralize ../name}}/{{../name}}.enum";
{{/ifCond}}
{{#each hasManyEntities}}
import { {{camelize this.name}} } from "@src/entities/{{camelizeFirstLow this.name}}.entity";
{{/each}}
{{#each belongsToEntityNames}}
import { {{camelize this}} } from "@src/entities/{{this}}.entity";
{{/each}}

@Entity()
export class {{camelize name}} extends NbaseEntity {
{{#each fields}}
  @Column({
    type: "{{ORMColumnType}}",
    {{#each options}}
    {{@key}}: {{{this}}},
    {{/each}}
  })
  {{name}}: {{typescriptType}};

{{/each}}

{{#each belongsToEntityNames}}
  @ApiProperty({
    type: () => {{camelize this}}
  })
  @ManyToOne((type) => {{camelize this}}, ({{this}}) => {{this}}.{{pluralize ../this.originalName}})
  {{this}}: {{camelize this}};
{{/each}}

{{#each hasManyEntities}}
  @ApiProperty({
    type: () => [{{camelize this.name}}]
  })
  @OneToMany((type) => {{camelize this.name}}, ({{this.originalName}}) => {{this.originalName}}.{{../this.name}}, {
    cascade: true,
    onDelete: "CASCADE",
    onUpdate: "CASCADE"
  })
  {{pluralize this.originalName}}: {{camelize this.name}}[];
{{/each}}

}