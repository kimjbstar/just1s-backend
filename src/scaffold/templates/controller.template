import {
  Controller,
  Get,
  Post,
  Put,
  Delete,
  Query,
  Param,
  Body,
  ParseIntPipe,
} from "@nestjs/common";
import { ApiQuery, ApiTags, ApiResponse } from "@nestjs/swagger";
import { Equal } from "typeorm";
import { NBaseCreateListConfig } from "@src/common/types/nbase-entity";
import { {{plucapitalize name}}Service } from "@src/modules/{{pluralize name}}/{{pluralize name}}.service";
import { {{plucapitalize name}}ListArgs } from "@src/modules/{{pluralize name}}/args/{{name}}-list.args";
import { {{plucapitalize name}}CreateDto } from "@src/modules/{{pluralize name}}/dtos/{{name}}-create.dto";
import { {{plucapitalize name}}ListResult } from "@src/modules/{{pluralize name}}/args/{{name}}-list.result";
import { {{plucapitalize name}}ListOrderBys } from "@src/modules/{{pluralize name}}/{{pluralize name}}.enum";
import { {{plucapitalize name}} } from "@src/entities/{{name}}.entity";

const create{{capitalize name}}ListConfig: NBaseCreateListConfig = {
  argsResolver: {
{{#each fields}}
    {{name}}: (args) => {
      return {
        {{name}}: Equal(args.{{name}})
      };
    },
{{/each}}
  },
  orderByResolver: {
    [{{capitalize name}}ListOrderBys.ID__DESC]: {
      cursor: {{name}}.id",
      orderBy: {
        {{name}}.id": "DESC"
      }
    },
    [{{capitalize name}}ListOrderBys.ID__ASC]: {
      cursor: {{name}}.id",
      orderBy: {
        {{name}}.id": "ASC"
      }
    }
  }
};

@ApiTags("{{pluralize name}}")
@Controller("{{pluralize name}}")
export class {{plucapitalize name}}Controller {
  constructor(private readonly {{plucapitalize name}}Service: {{plucapitalize name}}Service) {}

  @Get()
  @ApiResponse({
    description: "{{capitalize name}}의 리스트를 가져옵니다.",
    type: {{capitalize name}}ListResult
  })
  async find(@Query() args: {{capitalize name}}ListArgs): Promise<any> {
    return await {{capitalize name}}.createList({{capitalize name}}ListResult, create{{capitalize name}}ListConfig, args);
  }

  @Get(":id")
  @ApiResponse({
    description: "id에 해당하는 {{capitalize name}}을 출력합니다.",
    type: {{capitalize name}}
  })
  @ApiQuery({ name: "id", description: "조회하실 id를 입력해주세요" })
  async get(@Param("id", ParseIntPipe) id: Number): Promise<any> {
    return await this.{{plucapitalize name}}Service.findByPk(id);
  }

  @Post()
  @ApiResponse({
    description: "dto에 해당하는 {{capitalize name}}을 생성하여 출력합니다.",
    type: {{capitalize name}}
  })
  async create(@Body() dto: {{capitalize name}}CreateDto): Promise<any> {
    return await this.{{plucapitalize name}}Service.create(dto);
  }

  @Put(":id")
  @ApiResponse({
    description: "id에 해당하는 {{capitalize name}}을 dto를 통해 업데이트하여 출력합니다.",
    type: {{capitalize name}}
  })
  @ApiQuery({ name: "id", description: "업데이트하실 id를 입력해주세요." })
  async update(
    @Param("id", ParseIntPipe) id: Number,
    @Body() dto: {{capitalize name}}CreateDto
  ): Promise<any> {
    return this.{{plucapitalize name}}Service.update(id, dto);
  }

  @Delete(":id")
  @ApiResponse({
    description: "id에 해당하는 {{capitalize name}}을 삭제합니다."
  })
  @ApiQuery({ name: "id", description: "삭제하실 id를 입력해주세요" })
  async delete(@Param("id", ParseIntPipe) id: Number): Promise<any> {
    return await this.{{plucapitalize name}}Service.destroy(id);
  }

}