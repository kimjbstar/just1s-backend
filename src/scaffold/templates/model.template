import { Op, Sequelize } from "sequelize";
import {
  Table,
  Column,
  Model,
  Default,
  DataType,
  ForeignKey,
  BelongsTo,
  AllowNull,
  HasMany,
  DefaultScope,
  Scopes,
  ScopesOptionsGetter
} from "sequelize-typescript";
{{#ifCond isSub '!=' true}}
import { {{#each ../enums}}{{this.name}},{{/each}} {{camelize ../name}}Orderbys } from "@src/modules/{{pluralize ../name}}/{{../name}}.enum";
{{/ifCond}}
{{#each hasManyModels}}
import { {{camelize this.name}} } from "@src/models/{{underscore this.name}}.model";
{{/each}}
{{#each belongsToModels}}
import { {{camelize this}} } from "@src/models/{{this}}.model";
{{/each}}

export const {{camelize name}}Scopes: ScopesOptionsGetter = () => ({
  {{#each fields}}
  {{name}}: value => {
    return {
      where: { {{name}}: value },
    };
  },
  {{/each}}
  {{#ifCond isSub '!=' true}}
  order: value => {
    if ({{camelize ../name}}Orderbys[value] == undefined) {
      return {};
    }
    const { cursor, orderBy } = {{camelize ../name}}Orderbys[value];
    return {
      attributes: {
        include: [[Sequelize.literal(cursor), "cursor"]],
      },
      order: orderBy,
    };
  },
  after: (value, orderbyKey) => {
    if ({{camelize ../name}}Orderbys[orderbyKey] == undefined) {
      return {};
    }
    const { cursor, orderBy } = {{camelize ../name}}Orderbys[orderbyKey];
    return {
      where: {
        [Op.and]: Sequelize.literal(`${cursor} < ${value}`),
      },
    };
  },
  {{/ifCond}}
})
@DefaultScope(() => ({
  include: [ {{#each belongsToModels}} {{camelize this}}, {{/each}}],
}))
@Scopes({{camelize name}}Scopes)
@Table
export class {{camelize name}} extends Model<{{camelize name}}> {
{{#each fields}}
    @Column({
        type: {{seqType}},
        {{#each options}}
        {{@key}}:{{this}},
        {{/each}}
    })
    {{name}}: {{tsType}};

{{/each}}

{{#each belongsToModels}}
  @ForeignKey(() => {{camelize this}})
  {{camelizeFirstLow this}}Id: number;

  @BelongsTo(() => {{camelize this}})
  {{camelizeFirstLow this}}: {{camelize this}};
{{/each}}

{{#each hasManyModels}}
  @HasMany(() => {{camelize this.name}}, {
    as: "{{pluralize this.originalName}}",
    foreignKey: "{{toLowerCase ../name}}Id",
    constraints: false
  })
  {{pluralize this.originalName}}: {{camelize this.name}}[];
{{/each}}
}