import { Op, Sequelize } from "sequelize";
import {
  Table,
  Column,
  Model,
  Default,
  DataType,
  ForeignKey,
  BelongsTo,
  AllowNull,
  DefaultScope,
  Scopes,
  ScopesOptionsGetter
} from "sequelize-typescript";
import { {{#each enums}}{{name}},{{/each}} {{capitalize name}}Orderbys } from "@src/modules/{{pluralize name}}/{{name}}.enum";

export const {{capitalize name}}Scopes: ScopesOptionsGetter = () => ({
  {{#each fields}}
  {{name}}: value => {
    return {
      where: { {{name}}: value },
    };
  },
  {{/each}}
  order: value => {
    if ({{capitalize name}}Orderbys[value] == undefined) {
      return {};
    }
    const { cursor, orderBy } = {{capitalize name}}Orderbys[value];
    return {
      attributes: {
        include: [[Sequelize.literal(cursor), "cursor"]],
      },
      order: orderBy,
    };
  },
  after: (value, orderbyKey) => {
    if ({{capitalize name}}Orderbys[orderbyKey] == undefined) {
      return {};
    }
    const { cursor, orderBy } = {{capitalize name}}Orderbys[orderbyKey];
    return {
      where: {
        [Op.and]: Sequelize.literal(`${cursor} < ${value}`),
      },
    };
  },
})
@DefaultScope(() => ({
  include: [],
}))
@Scopes({{capitalize name}}Scopes)
@Table
export class {{capitalize name}} extends Model<{{capitalize name}}> {
{{#each fields}}
    @Column({
        type: {{seqType}},
        {{#each options}}
        {{@key}}:{{this}},
        {{/each}}
    })
    {{name}}: {{tsType}};

{{/each}}
}